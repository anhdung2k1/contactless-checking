{{- $g := fromJson (include "ck-application.global" .) -}}
{{- $schema := "http" -}}
{{- if $g.security.tls.enabled -}}
  {{- $schema = "https" -}}
{{- end -}}
logging:
  level:
    org:
      springframework:
        web: debug
#Get the ENV from k8s, docker env
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: update
  management:
    endpoints:
      web:
        exposure:
          include: "health"
    endpoint:
      health:
        show-details: "always"
    health:
      db:
        enabled: true

# AWS Cloud Configuration
cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    region:
      static: ${AWS_DEFAULT_REGION}
    stack:
      auto: false

server:
  {{- if $g.security.tls.enabled }}
  port: {{ .Values.server.authentication.httpsPort }}
  ssl:
    enabled: true
    key-store: ${KEY_STORE_PATH}
    key-store-password: ${KEYSTORE_PASSWORD}
    key-store-type: PKCS12
    key-alias: ssl-cert
  {{- else }}
  port: {{ .Values.server.authentication.httpPort }}
  {{- end }}

bucket:
  name: contactless-checking

cors:
  allowed-origins: "{{- $allowedOrigins := .Values.issuer.ipAddress | join ", $schema://" -}}
  {{ $schema }}://{{ $allowedOrigins }}
  {{- range $ip := .Values.issuer.ipAddress -}}
  , {{ $schema }}://{{ $ip }}:{{ $.Values.server.faceClient.httpNodePort }}
  {{- end -}}
  {{- if .Values.ingress.enabled -}}
  , {{ $schema }}://{{ include "ck-application.ingressPath" (list . (include "ck-client.name" .)) }}
  {{- end }}"