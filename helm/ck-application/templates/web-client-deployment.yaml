apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ck-client.name" . }}
  labels: {{- include "ck-client.labels" . | nindent 4 }}
  annotations: {{- include "ck-application.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  selector:
    matchLabels: {{- include "ck-client.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations: {{- include "ck-application.annotations" . | nindent 8 }}
      labels: {{- include "ck-client.labels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: {{ template "ck-application.fsGroup.coordinated" . }}
        {{- include "ck-application.podSeccompProfile" . | indent 8 }}
        {{- include "ck-application.supplementalGroups" . }}
      initContainers:
      - name: init-config
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -x
          # Get both service names and create configmap
          AUTH_SVC_IP=$(kubectl get svc {{ template "ck-authentication.name" . }} -n {{ include "ck-application.namespace" . }} -o=jsonpath='{.spec.clusterIP}')
          AUTH_SVC_PORT={{ .Values.server.authentication.port }}
          AUTH_URL="https://${AUTH_SVC_IP}:${AUTH_SVC_PORT}"

          SERVER_SVC_IP=$(kubectl get svc {{ template "ck-server.name" . }} -n {{ include "ck-application.namespace" . }} -o=jsonpath='{.spec.clusterIP}')
          SERVER_SVC_PORT={{ .Values.server.faceModel.port }}
          SERVER_URL="https://${SERVER_SVC_IP}:${SERVER_SVC_PORT}"

          kubectl -n {{ include "ck-application.namespace" . }} create configmap service-ip-config \
              --from-literal=auth-service-url=$AUTH_URL \
              --from-literal=server-service-url=$SERVER_URL \
              --dry-run=client -o yaml | kubectl apply -f -
      containers:
      {{- include "ck-client-containers" (list .) | nindent 6 }}
