apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ck-authentication.name" . }}
  labels: 
    {{- include "ck-authentication.labels" . | nindent 4 }}
  annotations: 
    {{- include "ck-application.annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  strategy:
    {{ toYaml .Values.updateStrategy | indent 4 }}
  selector:
    matchLabels: 
      {{- include "ck-authentication.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations: 
        {{- include "ck-application.annotations" . | nindent 8 }}
      labels: 
        {{- include "ck-authentication.labels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: {{ template "ck-application.fsGroup.coordinated" . }}
        {{- include "ck-application.podSeccompProfile" . | indent 8 }}
        {{- include "ck-application.supplementalGroups" . }}
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.36.1
          command:
            - sh
            - -c
            - |
              echo "Starting initContainer to wait for MySQL";
              while ! nc -z -v -w30 {{ template "ck-mysql.name" . }} {{ .Values.server.mysqlServer.port }};
              do
                echo "Waiting for MySQL to be ready...";
                sleep 5;
              done;
              echo "MySQL is up and running";
              echo "Init container finished successfully";
        - name: init-keystore
          image: alpine:3.13
          command: ["/bin/sh", "-c"]
          args:
          - |
            apk add --no-cache openssl;
            # Remove existing keystore if it exists
            rm -rf {{ .Values.server.secretsPath.keyStorePath }}/keystore.p12;
            # Create keystore.p12
            openssl pkcs12 -export \
              -in {{ .Values.server.secretsPath.certPath }}/tls.crt \
              -inkey {{ .Values.server.secretsPath.certPath }}/tls.key \
              -out {{ .Values.server.secretsPath.keyStorePath }}/keystore.p12 \
              -CAfile {{ .Values.server.secretsPath.certPath }}/ca.crt \
              -name ssl-cert \
              -passout pass:$KEYSTORE_PASSWORD
            # Check is file or directory for debugging
            if [ -f {{ .Values.server.secretsPath.keyStorePath }}/keystore.p12 ]; then
              echo "{{ .Values.server.secretsPath.keyStorePath }}/keystore.p12 is a file"
            else
              echo "{{ .Values.server.secretsPath.keyStorePath }}/keystore.p12 is a directory"
            fi

            echo "Check if keystore.p12 exists directly:"
            if [ -f "{{ .Values.server.secretsPath.keyStorePath }}/keystore.p12" ]; then
              echo "keystore.p12 exists!";
            else
              echo "keystore.p12 did not exist!";
            fi
            echo "Waiting for keystore.p12 to be found...";
            while ! stat "{{ .Values.server.secretsPath.keyStorePath }}/keystore.p12" > /dev/null 2>&1; do
              echo "keystore.p12 not found, waiting...";
              sleep 5;
            done;
            echo "keystore.p12 found! Listing its permissions:";
            # Verify the keystore once it's found
            while true; do
              openssl pkcs12 -info -in "{{ .Values.server.secretsPath.keyStorePath }}/keystore.p12" -nokeys -passin pass:$KEYSTORE_PASSWORD;
              if [ $? -eq 0 ]; then
                echo "Keystore verification successful!";
                break;
              else
                echo "Keystore verification failed! Retrying in 5 seconds...";
                sleep 5;
              fi
            done;
          env:
          - name: KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "ck-authentication.name" . }}-secret
                key: {{ template "ck-authentication.name" . }}-keystore-password
          volumeMounts:
          - name: keystore-cert
            mountPath: {{ .Values.server.secretsPath.keyStorePath }}
          - name: tls-auth-secret
            mountPath: {{ .Values.server.secretsPath.certPath }}
      containers:
        {{- include "ck-auth-containers" (list .) | nindent 6 }}